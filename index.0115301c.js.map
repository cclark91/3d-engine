{"mappings":"AAGA,MAAMA,KAQJC,YACSC,EACAC,EACAC,EACAC,G,KAHAH,K,KACAC,I,KACAC,I,KACAC,KAOX,MAAMC,KAMJL,YAAmBE,EAAkBC,G,KAAlBD,I,KAAkBC,KAGvC,MAAMG,UACJN,YAAoBO,G,KAAAA,SAEpBC,SAASC,GACP,MAAMP,EACJQ,KAAKH,OAAO,GAAG,GAAKE,EAAEP,EACtBQ,KAAKH,OAAO,GAAG,GAAKE,EAAEN,EACtBO,KAAKH,OAAO,GAAG,GAAKE,EAAEL,EAClBD,EACJO,KAAKH,OAAO,GAAG,GAAKE,EAAEP,EACtBQ,KAAKH,OAAO,GAAG,GAAKE,EAAEN,EACtBO,KAAKH,OAAO,GAAG,GAAKE,EAAEL,EAClBA,EACJM,KAAKH,OAAO,GAAG,GAAKE,EAAEP,EACtBQ,KAAKH,OAAO,GAAG,GAAKE,EAAEN,EACtBO,KAAKH,OAAO,GAAG,GAAKE,EAAEL,EACxB,OAAO,IAAIL,KAAKU,EAAER,GAAIC,EAAGC,EAAGC,IAIhC,MAAMO,UACJX,YAAoBO,G,KAAAA,SAEpBC,SAASC,GACP,OAAO,IAAIJ,KAAK,EAAG,IAOvB,MAAMO,KAMJZ,YAAmBa,EAAoBC,G,KAApBD,M,KAAoBC,OAMzC,MAAMC,MACJC,SAA0B,GAC1BC,MAAuB,GAEvBC,UAAUC,GACR,MAAMC,EAAM,QAAUV,KAAKM,SAASK,OAC9BZ,EAAI,IAAIV,KAAKqB,EAAKD,EAAKjB,EAAGiB,EAAKhB,EAAGgB,EAAKf,GAE7C,OADAM,KAAKM,SAASM,KAAKb,GACZA,EAGTc,QAAQC,EAASC,GACff,KAAKO,MAAMK,KAAK,IAAIV,KAAKY,EAAEvB,GAAIwB,EAAExB,KAGnCyB,IAAIC,GACF,MAAMC,EAAQ,IAAIb,MAGlB,OAFAa,EAAMZ,SAAWN,KAAKM,SAASU,IAAIC,GACnCC,EAAMX,MAAQ,IAAIP,KAAKO,OAChBW,GAIX,MAAMC,MACJ7B,YACS4B,EAAe,IAAIb,MACnBe,EAAuB,EACvBC,EAAuB,G,KAFvBH,Q,KACAE,e,KACAC,gBAIX,MAAMC,QACJhC,YACWiC,EACAC,EAAgB,IAChBC,EAAiB,IACnBC,EAAiB,EACjBC,EAAiB,G,KAJfJ,S,KACAC,Q,KACAC,S,KACFC,S,KACAC,UAIX,MAAMC,aAAe,EACfC,YAAc,IACdC,YAAc,GAEdC,OAAS,CAACC,EAAcd,KAE5B,MAAMe,EAAuC,IAAIC,IACjD,IAAK,IAAIC,KAAUjB,EAAMZ,SAAU,CACjC,MAAM8B,EAAmB,EANT,GAMaD,EAAOzC,EACpCuC,EAAkBI,IAChBF,EAAO5C,GACP,IAAII,KAAKwC,EAAO3C,EAAI4C,EAAkBD,EAAO1C,EAAI2C,IAKrDJ,EAAIT,OAAOe,UAAY,QACvBN,EAAIT,OAAOgB,YACXP,EAAIT,OAAOiB,KAAK,EAAG,EAAGR,EAAIR,MAAOQ,EAAIP,QACrCO,EAAIT,OAAOkB,OAGX,MAAMC,EAAclD,GArBF,IAsBTA,EAAkBwC,EAAIR,MAAQ,EAEjCmB,EAAclD,GAxBF,IAyBTA,EAAkBuC,EAAIP,OAAS,EAExCO,EAAIT,OAAOe,UAAY,QACvB,IAAK,IAAKM,EAAGC,KAAWZ,EACtBD,EAAIT,OAAOgB,YACXP,EAAIT,OAAOuB,QACTJ,EAAWG,EAAOrD,GAClBmD,EAAWE,EAAOpD,GAjCH,IAoCf,EACA,EACA,EAAIsD,KAAKC,IAEXhB,EAAIT,OAAOkB,OAIbT,EAAIT,OAAO0B,YAAc,QACzB,IAAK,IAAIC,KAAQhC,EAAMX,MAAO,CAC5B,MAAM4C,EAAUlB,EAAkBmB,IAAIF,EAAK/C,KACrCkD,EAAUpB,EAAkBmB,IAAIF,EAAK9C,KACtC+C,GAAYE,IAGjBrB,EAAIT,OAAOgB,YACXP,EAAIT,OAAO+B,OAAOZ,EAAWS,EAAQ3D,GAAImD,EAAWQ,EAAQ1D,IAC5DuC,EAAIT,OAAOgC,OAAOb,EAAWW,EAAQ7D,GAAImD,EAAWU,EAAQ5D,IAC5DuC,EAAIT,OAAOiC,YAITC,MAAQ,CAACzB,EAAc0B,KAC3B,MAAMxC,EAAQwC,EAAMxC,MAEpB,IAAK,IAAIyC,GAAS,EAAIA,EAAS,EAAGA,IAAU,CAC1C,MAAMC,EAAS,EACTC,EAASF,EACTG,EAAS,EAETC,EAAkB7C,EAAMV,UAAU,CACtChB,GAAG,GAAOoE,EACVnE,EAAG,GAAMoE,EACTnE,EAAG,GAAMoE,IAELE,EAAmB9C,EAAMV,UAAU,CACvChB,EAAG,GAAMoE,EACTnE,EAAG,GAAMoE,EACTnE,EAAG,GAAMoE,IAELG,EAAiB/C,EAAMV,UAAU,CACrChB,GAAG,GAAOoE,EACVnE,EAAG,GAAMoE,EACTnE,GAAG,GAAOoE,IAENI,EAAkBhD,EAAMV,UAAU,CACtChB,EAAG,GAAMoE,EACTnE,EAAG,GAAMoE,EACTnE,GAAG,GAAOoE,IAGNK,EAAejD,EAAMV,UAAU,CACnChB,GAAG,GAAOoE,EACVnE,GAAG,GAAOoE,EACVnE,EAAG,GAAMoE,IAELM,EAAgBlD,EAAMV,UAAU,CACpChB,EAAG,GAAMoE,EACTnE,GAAG,GAAOoE,EACVnE,EAAG,GAAMoE,IAELO,EAAcnD,EAAMV,UAAU,CAClChB,GAAG,GAAOoE,EACVnE,GAAG,GAAOoE,EACVnE,GAAG,GAAOoE,IAENQ,EAAepD,EAAMV,UAAU,CACnChB,EAAG,GAAMoE,EACTnE,GAAG,GAAOoE,EACVnE,GAAG,GAAOoE,IAGZ5C,EAAML,QAAQkD,EAAiBC,GAC/B9C,EAAML,QAAQmD,EAAkBE,GAChChD,EAAML,QAAQqD,EAAiBD,GAC/B/C,EAAML,QAAQoD,EAAgBF,GAE9B7C,EAAML,QAAQsD,EAAcC,GAC5BlD,EAAML,QAAQuD,EAAeE,GAC7BpD,EAAML,QAAQyD,EAAcD,GAC5BnD,EAAML,QAAQwD,EAAaF,GAE3BjD,EAAML,QAAQkD,EAAiBI,GAC/BjD,EAAML,QAAQmD,EAAkBI,GAChClD,EAAML,QAAQoD,EAAgBI,GAC9BnD,EAAML,QAAQqD,EAAiBI,GAGjC,IAAK,IAAIC,GAAS,EAAIA,EAAS,EAAGA,IAAU,CAC1C,MAAMX,EAASW,EACTV,EAAS,EACTC,EAAS,EAETC,EAAkB7C,EAAMV,UAAU,CACtChB,GAAG,GAAOoE,EACVnE,EAAG,GAAMoE,EACTnE,EAAG,GAAMoE,IAELE,EAAmB9C,EAAMV,UAAU,CACvChB,EAAG,GAAMoE,EACTnE,EAAG,GAAMoE,EACTnE,EAAG,GAAMoE,IAELG,EAAiB/C,EAAMV,UAAU,CACrChB,GAAG,GAAOoE,EACVnE,EAAG,GAAMoE,EACTnE,GAAG,GAAOoE,IAENI,EAAkBhD,EAAMV,UAAU,CACtChB,EAAG,GAAMoE,EACTnE,EAAG,GAAMoE,EACTnE,GAAG,GAAOoE,IAGNK,EAAejD,EAAMV,UAAU,CACnChB,GAAG,GAAOoE,EACVnE,GAAG,GAAOoE,EACVnE,EAAG,GAAMoE,IAELM,EAAgBlD,EAAMV,UAAU,CACpChB,EAAG,GAAMoE,EACTnE,GAAG,GAAOoE,EACVnE,EAAG,GAAMoE,IAELO,EAAcnD,EAAMV,UAAU,CAClChB,GAAG,GAAOoE,EACVnE,GAAG,GAAOoE,EACVnE,GAAG,GAAOoE,IAENQ,EAAepD,EAAMV,UAAU,CACnChB,EAAG,GAAMoE,EACTnE,GAAG,GAAOoE,EACVnE,GAAG,GAAOoE,IAGZ5C,EAAML,QAAQkD,EAAiBC,GAC/B9C,EAAML,QAAQmD,EAAkBE,GAChChD,EAAML,QAAQqD,EAAiBD,GAC/B/C,EAAML,QAAQoD,EAAgBF,GAE9B7C,EAAML,QAAQsD,EAAcC,GAC5BlD,EAAML,QAAQuD,EAAeE,GAC7BpD,EAAML,QAAQyD,EAAcD,GAC5BnD,EAAML,QAAQwD,EAAaF,GAE3BjD,EAAML,QAAQkD,EAAiBI,GAC/BjD,EAAML,QAAQmD,EAAkBI,GAChClD,EAAML,QAAQoD,EAAgBI,GAC9BnD,EAAML,QAAQqD,EAAiBI,KAI7BE,KAAO,CAACxC,EAAc0B,KAC1BA,EAAMtC,eAAkBY,EAAIL,OAASK,EAAIP,OAAS,GAAKO,EAAIP,OAAUsB,KAAKC,GAC1EU,EAAMrC,cAAiBW,EAAIN,OAASM,EAAIR,MAAM,GAAMQ,EAAIR,MAASuB,KAAKC,GAGtE,IAAIyB,EAAM1B,KAAK0B,IAAIf,EAAMtC,cACrBsD,EAAM3B,KAAK2B,IAAIhB,EAAMtC,cACzB,MAAMuD,EAAU,IAAI/E,UAAU,CAC5B,CAAC,EAAG,EAAG,GACP,CAAC,EAAG8E,GAAMD,GACV,CAAC,EAAGA,EAAKC,KAEXD,EAAM1B,KAAK0B,IAAIf,EAAMrC,cACrBqD,EAAM3B,KAAK2B,IAAIhB,EAAMrC,cACrB,MAAMuD,EAAU,IAAIhF,UAAU,CAC5B,CAAC8E,EAAK,EAAGD,GACT,CAAC,EAAG,EAAG,GACP,EAAEA,EAAK,EAAGC,KAGNG,EAAmBnB,EAAMxC,MAC5BF,KAAIjB,GAAK4E,EAAQ7E,SAASC,KAC1BiB,KAAIjB,GAAK6E,EAAQ9E,SAASC,KAE7BgC,OAAOC,EAAK6C,IAGdC,OAAOC,OAAS,KACd,MAAMxD,EACJyD,SAASC,eAAe,SAE1B1D,EAAOC,MAAQsD,OAAOI,WACtB3D,EAAOE,OAASqD,OAAOK,YACvB,MAAMC,EAAY7D,EAAO8D,WAAW,MACpC,IAAKD,EACH,MAAM,IAAIE,MAAM,oCAGlB,MAAM5B,EAAQ,IAAIvC,MACZa,EAAM,IAAIV,QAAQ8D,EAAW7D,EAAOC,MAAOD,EAAOE,QAElD8D,EAAahE,EAAOiE,wBAC1BV,OAAOW,YAAcC,IACnB1D,EAAIN,OAASgE,EAAEC,QAAUJ,EAAWK,KACpC5D,EAAIL,OAAS+D,EAAEG,QAAUN,EAAWO,KAGtCrC,MAAMzB,EAAK0B,GAEX,MAAMqC,EAAO,KACXvB,KAAKxC,EAAK0B,GACVoB,OAAOkB,sBAAsBD,IAE/BA","sources":["src/App.ts"],"sourcesContent":["/**\n * Represents a 3 dimensional vector\n */\nclass Vec3 {\n  /*\n   * Create a new Vec3\n   * @param {string} id - unique id for this vector\n   * @param {number} x - the x position of the vector\n   * @param {number} y - the y position of the vector\n   * @param {number} x - the x position of the vector\n   */\n  constructor(\n    public id: string,\n    public x: number,\n    public y: number,\n    public z: number,\n  ) {}\n}\n\n/**\n * Represents a 2 dimensional vector\n */\nclass Vec2 {\n  /*\n   * Create a new Vec2\n   * @param {number} x - the x position of the vector\n   * @param {number} y - the y position of the vector\n   */\n  constructor(public x: number, public y: number) {}\n}\n\nclass Matrix3x3 {\n  constructor(private values: number[][]) {}\n\n  multiply(v: Vec3): Vec3 {\n    const x =\n      this.values[0][0] * v.x +\n      this.values[1][0] * v.y +\n      this.values[2][0] * v.z;\n    const y =\n      this.values[0][1] * v.x +\n      this.values[1][1] * v.y +\n      this.values[2][1] * v.z;\n    const z =\n      this.values[0][2] * v.x +\n      this.values[1][2] * v.y +\n      this.values[2][2] * v.z;\n    return new Vec3(v.id, x, y, z);\n  }\n}\n\nclass Matrix3x2 {\n  constructor(private values: number[][]) {}\n\n  multiply(v: Vec3): Vec2 {\n    return new Vec2(0, 0);\n  }\n}\n\n/**\n * Represents a connection between two vertices in a 3D model\n */\nclass Edge {\n  /*\n   * Create a new Edge\n   * @param {string} idA - id for the vertex that starts the edge\n   * @param {string} idB - id for the vertex that ends the edge\n   */\n  constructor(public idA: string, public idB: string) {}\n}\n\n/**\n * Represents a 3D model that can be rendered\n */\nclass Model {\n  public vertices: Vec3[] = [];\n  public edges: Edge[] = [];\n\n  addVertex(args: {x: number; y: number; z: number}): Vec3 {\n    const vId = 'vert-' + this.vertices.length;\n    const v = new Vec3(vId, args.x, args.y, args.z);\n    this.vertices.push(v);\n    return v;\n  }\n\n  addEdge(a: Vec3, b: Vec3) {\n    this.edges.push(new Edge(a.id, b.id));\n  }\n\n  map(f: (v: Vec3) => Vec3): Model {\n    const model = new Model();\n    model.vertices = this.vertices.map(f);\n    model.edges = [...this.edges];\n    return model;\n  }\n}\n\nclass State {\n  constructor(\n    public model: Model = new Model(),\n    public cameraAngleX: number = 0,\n    public cameraAngleY: number = 0,\n  ) {}\n}\n\nclass Context {\n  constructor(\n    readonly canvas: CanvasRenderingContext2D,\n    readonly width: number = 800,\n    readonly height: number = 600,\n    public mouseX: number = 0,\n    public mouseY: number = 0,\n  ) {}\n}\n\nconst vertexRadius = 3;\nconst scaleFactor = 100;\nconst fudgeFactor = 0.2;\n\nconst render = (ctx: Context, model: Model) => {\n  // Loop through the vertices in the model and store their 2D projections\n  const projectedVertices: Map<string, Vec2> = new Map();\n  for (let vertex of model.vertices) {\n    const perspectiveScale = 1 + vertex.z * fudgeFactor;\n    projectedVertices.set(\n      vertex.id,\n      new Vec2(vertex.x / perspectiveScale, vertex.y / perspectiveScale),\n    );\n  }\n\n  // Erase the previous frame\n  ctx.canvas.fillStyle = 'black';\n  ctx.canvas.beginPath();\n  ctx.canvas.rect(0, 0, ctx.width, ctx.height);\n  ctx.canvas.fill();\n\n  // Render each vertex\n  const transformX = (x: number): number => {\n    return x * scaleFactor + ctx.width / 2;\n  };\n  const transformY = (y: number): number => {\n    return y * scaleFactor + ctx.height / 2;\n  };\n  ctx.canvas.fillStyle = 'white';\n  for (let [_, vertex] of projectedVertices) {\n    ctx.canvas.beginPath();\n    ctx.canvas.ellipse(\n      transformX(vertex.x),\n      transformY(vertex.y),\n      vertexRadius,\n      vertexRadius,\n      0,\n      0,\n      2 * Math.PI,\n    );\n    ctx.canvas.fill();\n  }\n\n  // Render the edges between each vertex\n  ctx.canvas.strokeStyle = 'white';\n  for (let edge of model.edges) {\n    const vertexA = projectedVertices.get(edge.idA);\n    const vertexB = projectedVertices.get(edge.idB);\n    if (!vertexA || !vertexB) {\n      continue;\n    }\n    ctx.canvas.beginPath();\n    ctx.canvas.moveTo(transformX(vertexA.x), transformY(vertexA.y));\n    ctx.canvas.lineTo(transformX(vertexB.x), transformY(vertexB.y));\n    ctx.canvas.stroke();\n  }\n};\n\nconst setup = (ctx: Context, state: State) => {\n  const model = state.model;\n\n  for (let rowNum = -2; rowNum < 3; rowNum++) {\n    const xDelta = 0;\n    const yDelta = rowNum;\n    const zDelta = 0;\n\n    const bottomFrontLeft = model.addVertex({\n      x: -0.5 + xDelta,\n      y: 0.5 + yDelta,\n      z: 0.5 + zDelta,\n    });\n    const bottomFrontRight = model.addVertex({\n      x: 0.5 + xDelta,\n      y: 0.5 + yDelta,\n      z: 0.5 + zDelta,\n    });\n    const bottomBackLeft = model.addVertex({\n      x: -0.5 + xDelta,\n      y: 0.5 + yDelta,\n      z: -0.5 + zDelta,\n    });\n    const bottomBackRight = model.addVertex({\n      x: 0.5 + xDelta,\n      y: 0.5 + yDelta,\n      z: -0.5 + zDelta,\n    });\n\n    const topFrontLeft = model.addVertex({\n      x: -0.5 + xDelta,\n      y: -0.5 + yDelta,\n      z: 0.5 + zDelta,\n    });\n    const topFrontRight = model.addVertex({\n      x: 0.5 + xDelta,\n      y: -0.5 + yDelta,\n      z: 0.5 + zDelta,\n    });\n    const topBackLeft = model.addVertex({\n      x: -0.5 + xDelta,\n      y: -0.5 + yDelta,\n      z: -0.5 + zDelta,\n    });\n    const topBackRight = model.addVertex({\n      x: 0.5 + xDelta,\n      y: -0.5 + yDelta,\n      z: -0.5 + zDelta,\n    });\n\n    model.addEdge(bottomFrontLeft, bottomFrontRight);\n    model.addEdge(bottomFrontRight, bottomBackRight);\n    model.addEdge(bottomBackRight, bottomBackLeft);\n    model.addEdge(bottomBackLeft, bottomFrontLeft);\n\n    model.addEdge(topFrontLeft, topFrontRight);\n    model.addEdge(topFrontRight, topBackRight);\n    model.addEdge(topBackRight, topBackLeft);\n    model.addEdge(topBackLeft, topFrontLeft);\n\n    model.addEdge(bottomFrontLeft, topFrontLeft);\n    model.addEdge(bottomFrontRight, topFrontRight);\n    model.addEdge(bottomBackLeft, topBackLeft);\n    model.addEdge(bottomBackRight, topBackRight);\n  }\n\n  for (let rowNum = -2; rowNum < 3; rowNum++) {\n    const xDelta = rowNum;\n    const yDelta = 0;\n    const zDelta = 0;\n\n    const bottomFrontLeft = model.addVertex({\n      x: -0.5 + xDelta,\n      y: 0.5 + yDelta,\n      z: 0.5 + zDelta,\n    });\n    const bottomFrontRight = model.addVertex({\n      x: 0.5 + xDelta,\n      y: 0.5 + yDelta,\n      z: 0.5 + zDelta,\n    });\n    const bottomBackLeft = model.addVertex({\n      x: -0.5 + xDelta,\n      y: 0.5 + yDelta,\n      z: -0.5 + zDelta,\n    });\n    const bottomBackRight = model.addVertex({\n      x: 0.5 + xDelta,\n      y: 0.5 + yDelta,\n      z: -0.5 + zDelta,\n    });\n\n    const topFrontLeft = model.addVertex({\n      x: -0.5 + xDelta,\n      y: -0.5 + yDelta,\n      z: 0.5 + zDelta,\n    });\n    const topFrontRight = model.addVertex({\n      x: 0.5 + xDelta,\n      y: -0.5 + yDelta,\n      z: 0.5 + zDelta,\n    });\n    const topBackLeft = model.addVertex({\n      x: -0.5 + xDelta,\n      y: -0.5 + yDelta,\n      z: -0.5 + zDelta,\n    });\n    const topBackRight = model.addVertex({\n      x: 0.5 + xDelta,\n      y: -0.5 + yDelta,\n      z: -0.5 + zDelta,\n    });\n\n    model.addEdge(bottomFrontLeft, bottomFrontRight);\n    model.addEdge(bottomFrontRight, bottomBackRight);\n    model.addEdge(bottomBackRight, bottomBackLeft);\n    model.addEdge(bottomBackLeft, bottomFrontLeft);\n\n    model.addEdge(topFrontLeft, topFrontRight);\n    model.addEdge(topFrontRight, topBackRight);\n    model.addEdge(topBackRight, topBackLeft);\n    model.addEdge(topBackLeft, topFrontLeft);\n\n    model.addEdge(bottomFrontLeft, topFrontLeft);\n    model.addEdge(bottomFrontRight, topFrontRight);\n    model.addEdge(bottomBackLeft, topBackLeft);\n    model.addEdge(bottomBackRight, topBackRight);\n  }\n};\n\nconst draw = (ctx: Context, state: State) => {\n  state.cameraAngleX = -((ctx.mouseY - ctx.height / 2) / ctx.height) * Math.PI;\n  state.cameraAngleY = ((ctx.mouseX - ctx.width/2)  / ctx.width) * Math.PI;\n\n  // Rotate model\n  let sin = Math.sin(state.cameraAngleX);\n  let cos = Math.cos(state.cameraAngleX);\n  const rotXMat = new Matrix3x3([\n    [1, 0, 0],\n    [0, cos, -sin],\n    [0, sin, cos],\n  ]);\n  sin = Math.sin(state.cameraAngleY);\n  cos = Math.cos(state.cameraAngleY);\n  const rotYMat = new Matrix3x3([\n    [cos, 0, sin],\n    [0, 1, 0],\n    [-sin, 0, cos],\n  ]);\n\n  const transformedModel = state.model\n    .map(v => rotXMat.multiply(v))\n    .map(v => rotYMat.multiply(v));\n\n  render(ctx, transformedModel);\n};\n\nwindow.onload = () => {\n  const canvas: HTMLCanvasElement = <HTMLCanvasElement>(\n    document.getElementById('stage')\n  );\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  const canvasCtx = canvas.getContext('2d');\n  if (!canvasCtx) {\n    throw new Error('Failed to acquire canvas context');\n  }\n\n  const state = new State();\n  const ctx = new Context(canvasCtx, canvas.width, canvas.height);\n\n  const canvasRect = canvas.getBoundingClientRect();\n  window.onmousemove = e => {\n    ctx.mouseX = e.clientX - canvasRect.left;\n    ctx.mouseY = e.clientY - canvasRect.top;\n  };\n\n  setup(ctx, state);\n\n  const loop = () => {\n    draw(ctx, state);\n    window.requestAnimationFrame(loop);\n  };\n  loop();\n};\n"],"names":["Vec3","constructor","id","x","y","z","Vec2","Matrix3x3","values","multiply","v","this","Matrix3x2","Edge","idA","idB","Model","vertices","edges","addVertex","args","vId","length","push","addEdge","a","b","map","f","model","State","cameraAngleX","cameraAngleY","Context","canvas","width","height","mouseX","mouseY","vertexRadius","scaleFactor","fudgeFactor","render","ctx","projectedVertices","Map","vertex","perspectiveScale","set","fillStyle","beginPath","rect","fill","transformX","transformY","_","vertex1","ellipse","Math","PI","strokeStyle","edge","vertexA","get","vertexB","moveTo","lineTo","stroke","setup","state","rowNum","xDelta","yDelta","zDelta","bottomFrontLeft","bottomFrontRight","bottomBackLeft","bottomBackRight","topFrontLeft","topFrontRight","topBackLeft","topBackRight","rowNum1","draw","sin","cos","rotXMat","rotYMat","transformedModel","window","onload","document","getElementById","innerWidth","innerHeight","canvasCtx","getContext","Error","canvasRect","getBoundingClientRect","onmousemove","e","clientX","left","clientY","top","loop","requestAnimationFrame"],"version":3,"file":"index.0115301c.js.map"}